<?php

// $Id$

/**
 * @file
 *
 * Installs the required database schema for storing display and control properties for the viewer.
 */

/**
 * Implementation of hook_install.
 */
function content_model_viewer_install() {
  drupal_install_schema('content_model_viewer');
  content_model_viewer_add_foreign_key_constraints();
  content_model_viewer_add_default_settings();
  content_model_viewer_set_default_rules();
}

/**
 * Adds foreign key constraints for all settings tables. 
 * 
 * On Delete of a Settings all tables with foreign key constrains will cascade the deletes.
 */
function content_model_viewer_add_foreign_key_constraints() {
  $table = CONTENT_MODEL_VIEWER_SETTINGS_TABLE;
  $constraint_query = <<<EOT
  ALTER TABLE `%table%` ADD CONSTRAINT `%table%_model_id`
  FOREIGN KEY (`model_id`)
  REFERENCES `$table` (`id`)
  ON DELETE CASCADE
  ON UPDATE NO ACTION
EOT;
  $tables = array(
    CONTENT_MODEL_VIEWER_DATASTREAM_MIMETYPE_RULES_TABLE,
    CONTENT_MODEL_VIEWER_DATASTREAM_DSID_RULES_TABLE
  );
  foreach ($tables as $table) {
    $query = str_replace('%table%', $table, $constraint_query);
    db_query($query);
  }
}

/**
 * Add the default settings model, this should not be removed from the database, unless the module 
 * is being uninstalled.
 */
function content_model_viewer_add_default_settings() {
  $row = new stdClass();
  $row->id = CONTENT_MODEL_VIEWER_DEFAULT_SETTINGS_MODEL_ID;
  $row->pid = 'default'; // Not referenced anywhere a placeholder value, as it can't be NULL.
  $row->view = 1; // Permit
  $row->download = 1; // Permit
  drupal_write_record(CONTENT_MODEL_VIEWER_SETTINGS_TABLE, $row);
}

/**
 * Clears the default Settings and restores the default Settings.
 */
function content_model_viewer_set_default_rules() {
  // Default allow all datastreams to be viewed/downloaded
  db_query('DELETE FROM %s WHERE id = "%i"', CONTENT_MODEL_VIEWER_DATASTREAM_DSID_RULES_TABLE, CONTENT_MODEL_VIEWER_DEFAULT_SETTINGS_MODEL_ID);
  db_query('DELETE FROM %s WHERE id = "%i"', CONTENT_MODEL_VIEWER_DATASTREAM_MIMETYPE_RULES_TABLE, CONTENT_MODEL_VIEWER_DEFAULT_SETTINGS_MODEL_ID);
  // Hide Fedora Specific Datastreams.
  $row = new stdClass();
  $row->model_id = CONTENT_MODEL_VIEWER_DEFAULT_SETTINGS_MODEL_ID;
  $row->view = 0; // Prohibit
  $row->download = 0; // Prohibit
  $hidden = array('POLICY', 'DC', 'RELS-EXT', 'RELS-INT', 'ISLANDORACM', 'COLLECTION_POLICY');
  foreach ($hidden as $hide) {
    $row->dsid = $hide;
    $row->type = CONTENT_MODEL_VIEWER_DATASTREAM_DSID_RULE_TYPE_EXACT;
    drupal_write_record(CONTENT_MODEL_VIEWER_DATASTREAM_DSID_RULES_TABLE, $row);
  }
}

/**
 * Implementation of hook_uninstall.
 */
function content_model_viewer_uninstall() {
  drupal_uninstall_schema('content_model_viewer');
}

/**
 * Implementation of hook_schema.
 * 
 * @return array
 */
function content_model_viewer_schema() {
  $schema[CONTENT_MODEL_VIEWER_DATASTREAM_MIMETYPE_RULES_TABLE] = array(
    'description' => t('This table is used to store rules for displaying/viewing/downloading datastreams for non-admin users.'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'model_id' => array(
        'type' => 'int',
        'not null' => TRUE
      ),
      'mime' => array(
        'description' => t('A MIME type.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ),
      'view' => array(
        'description' => t('TRUE if the user is allowed to view datastreams that match this rule FALSE otherwise.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'download' => array(
        'description' => t('TRUE if the user is allowed to download datastreams that match this rule FALSE otherwise.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'model_id' => array('model_id'),
    ),
  );
  $schema[CONTENT_MODEL_VIEWER_DATASTREAM_DSID_RULES_TABLE] = array(
    'description' => t('This table is used to store rules for displaying/viewing/downloading datastreams for non-admin users.'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'model_id' => array(
        'type' => 'int',
        'not null' => TRUE
      ),
      'dsid' => array(
        'description' => t('A regular expression for matching against a Datastream ID.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => t('The type of value within dsid.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => CONTENT_MODEL_VIEWER_DATASTREAM_DSID_RULE_TYPE_EXACT // Expected to 0 or 1, where 0 is exact and 1 in regex.
      ),
      'view' => array(
        'description' => t('TRUE if the user is allowed to view datastreams that match this rule FALSE otherwise.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'download' => array(
        'description' => t('TRUE if the user is allowed to download datastreams that match this rule FALSE otherwise.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'model_id' => array('model_id'),
    ),
  );
  /* Defines the point of customization */
  $schema[CONTENT_MODEL_VIEWER_SETTINGS_TABLE] = array(
    'description' => t('This table is used to store associations between XML Form API style form definitions, and the Content models that use them.'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => t('The content model pid.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE
      ),
      'view' => array(
        'description' => t('TRUE if the user is allowed to view datastreams that match this rule FALSE otherwise.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'download' => array(
        'description' => t('TRUE if the user is allowed to download datastreams that match this rule FALSE otherwise.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'pid' => array('pid')
    ),
  );
  return $schema;
}