<?php

// $Id$

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */
/**
 * Constants
 */
define("PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS", 'View Objects & Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES", 'Modify Object Properties');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS", 'Purge Objects');
define("PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS", 'Add Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS", 'Purge Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS", 'Download Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES", 'Modify Datastream Properties');

/**
 * Implements Menu Hook. Registers Menus.
 */
function content_model_viewer_menu() {
  $items['viewer/%'] = array(
    'title' => t('Content Model Viewer'),
    'description' => t('Allows users to view Fedora Objects.'),
    'page callback' => 'content_model_viewer',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['viewer/%/properties'] = array(
    'page callback' => 'content_model_viewer_properties',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams'] = array(
    'page callback' => 'content_model_viewer_datastreams',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams/%'] = array(
    'page callback' => 'content_model_viewer_datastream',
    'page arguments' => array(1, 3),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/overview'] = array(
    'page callback' => 'content_model_viewer_overview',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_object',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/add'] = array(
    'page callback' => 'content_model_viewer_add_datastream',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/download'] = array(
    'page callback' => 'content_model_viewer_download_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/view'] = array(
    'page callback' => 'content_model_viewer_view_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/properties'] = array(
    'page callback' => 'content_model_viewer_properties',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_perm. Register permissions.
 *
 * @return array
 */
function content_model_viewer_perm() {
  return array(
    PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES
  );
}

/**
 * Implements Hook Theme. Registers themes.
 *
 * @return array
 */
function content_model_viewer_theme() {
  return array(
    'content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'Viewer',
    ),
  );
}

/**
 * Sets up variables for the template.
 * 
 * @param array $variables
 */
function template_preprocess_content_model_viewer(array &$variables) {
  $pid = $variables['pid'];
  $variables['paths'] = array(
    'object' => array(
      'overview' => "viewer/$pid/overview",
      'properties' => "viewer/$pid/properties",
      'datastreams' => "viewer/$pid/datastreams",
      'purge' => "viewer/$pid/purge"
    ),
    'datastream' => array(
      'add' => "viewer/$pid/add",
      'purge' => "viewer/$pid/dsid/purge",
      'properties' => "viewer/dsid/properties",
      'download' => "viewer/$pid/dsid/download",
      'view' => "viewer/$pid/dsid/view"
    )
  );
}

/**
 * Renders the Viewer for a given pid if possible.
 *
 * @param string $pid
 */
function content_model_viewer($pid) {
  global $base_url;
  $path = drupal_get_path('module', 'content_model_viewer');
  /* Load ExtJS */
  $ext_path = $path . '/lib/ext';
  drupal_add_js($ext_path . '/ext-all-dev.js');
  drupal_add_css($path . '/css/Clear.css');
  drupal_add_css($ext_path . '/resources/css/ext-all-gray.css', 'theme', 'all');
  /* Load Viewer */
  $js_path = $path . '/js';
  /* @todo Determine what widgits need to be defined. */
  drupal_add_js($js_path . '/IncludeFirst.js');
  drupal_add_js($js_path . '/FilesPanel.js'); /* Appears on the OverviewPanel and the Viewer Panel */
  /* @todo Determine what panels to render */
  drupal_add_js($js_path . '/OverviewPanel.js');
  drupal_add_js($js_path . '/CollectionPanel.js');
  drupal_add_js($js_path . '/ViewerPanel.js');
  drupal_add_js($js_path . '/ManagePanel.js');
  drupal_add_js($js_path . '/ContentModelViewer.js');
  drupal_add_css($path . '/css/ContentModelViewer.css');
  /* @todo: Load required javascript for each datastream viewer */
  return theme('content_model_viewer', $pid);
}

/**
 * Returns the HTML for overview panel in the viewer.
 * 
 * @param string $pid 
 * 
 * @return string
 */
function content_model_viewer_overview($pid) {
  echo '<div>Over View Panel</div>';
  exit();
}

/**
 * 
 * 
 * @param string $pid 
 */
function content_model_viewer_datastreams($pid) {
  // @todo check to see if the object exists.
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $data = array();
  $count = 0;
  $start = $_GET['start'];
  $limit = $_GET['limit'];
  $end = (isset($limit)) ? $start + $limit : NULL;
  foreach ($item->datastreams as $dsid => $attr) {
    if ($count >= $start && (empty($end) || $count < $end)) {
      $stream['dsid'] = $dsid;
      $stream['label'] = $attr['label'];
      $stream['state'] = 'A';
      $stream['mime'] = $attr['MIMEType'];
      $stream['created'] = '';
      $stream['view'] = true;
      $stream['download'] = true;
      $stream['tn'] = 'some url';
      $data[] = $stream;
    }
    $count++;
  }
  $total = count($item->datastreams);
  echo json_encode(array('success' => TRUE, 'data' => $data, 'total' => $total));
  exit();
}

/**
 * Get/Set a datastreams properties.
 * 
 * @param string $pid
 * @param string $dsid 
 */
function content_model_viewer_datastream($pid, $dsid) {
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'PUT':
      if ($_SERVER['CONTENT_LENGTH'] > 0) {
        $stdin = fopen("php://input", "r");
        $json = fread($stdin, $_SERVER['CONTENT_LENGTH']);
        $data = json_decode($json);
        // @todo Update the datastreams properties...
        echo json_encode(array('success' => TRUE, 'msg' => "Successfully modified $dsid's properties"));
        exit();
      }
      break;
  }
}

/**
 * Gets/sets the properties of the object identified by $pid.
 *
 * @param string $pid
 * 
 * @return string
 */
function content_model_viewer_properties($pid) {
  module_load_include('inc', 'content_model_viewer', 'ObjectProperties');
  if (empty($_POST)) {
    $object_properties = new ObjectProperties($pid);
    $properties = $object_properties->getProperties();
    return json_encode(array('success' => TRUE, 'data' => $properties));
  }
  else {
    $label = $_POST['label'];
    $owner = $_POST['owner'];
    $state = $_POST['state'];
    $object_properties = new ObjectProperties($pid);
    $success = $object_properties->setProperties($label, $owner, $state);
    $message = $success ? t('Successfuly modified object properties') : t('Failed to modify object properties');
    $properties = $object_properties->getProperties();
    return json_encode(array('success' => TRUE, 'msg' => $message, 'data' => $properties));
  }
}

/**
 * Purges the object identified by $pid.
 *
 * The user will be redirected to the sites home page.
 *
 * @param string $pid 
 *
 * @return string
 */
function content_model_viewer_purge_object($pid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge();
  $message = $success ? t('Successfuly deleted object') : t('Failed to delete object');
  return json_encode(array('success' => $success, 'msg' => $message));
}

/**
 * Adds a datastream to the object identified by $pid.
 *
 * @param string $pid 
 *
 * @return string
 */
function content_model_viewer_add_datastream($pid) {
  $values = $_POST;
  $dsid = $_POST['dsid'];
  $label = $_POST['label'];
  $control = $_POST['control_group'];
  $mime = $_POST['mime_type'];
  $file = array_shift($_FILES);
  if ($file['type'] != $mime) {
    $message = t('Mime type of file does not match the mime type specified.');
    return json_encode(array('success' => FALSE, 'msg' => $message));
  }
  else {
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');
    $item = new Fedora_Item($pid);
    $success = $item->add_datastream_from_file($file['tmp_name'], $dsid, $label, $mime, $control);
    $message = $success ? t('Successfully added datastream.') : t('Failed to add datastream.');
    return json_encode(array('success' => $success, 'msg' => $message));
  }
}

/**
 * Purges the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_purge_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge_datastream($dsid);
  $message = $success ? t('Successfully purged datastream.') : t('Failed to purge datastream.');
  return json_encode(array('success' => $success, 'msg' => $message));
}

/**
 * Downloads the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_download_datastream($pid, $dsid) {
  module_load_include('inc', 'content_model_viewer', 'Download');
  download_datastream($pid, $dsid);
}

/**
 * Renders the viewer for the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_view_datastream($pid, $dsid) {
  // @todo implement
}

/**
 * Gets/set the properties of the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_datastream_properties($pid, $dsid) {
  module_load_include('inc', 'content_model_viewer', 'DatastreamProperties');
  if (empty($_POST)) {
    // @todo detect if the datastream doesn't exist and respond accordingly
    $datastream_properties = new DatastreamProperties($pid);
    list($properties, $total) = $datastream_properties->getProperties();
    return json_encode(array('success' => TRUE, 'data' => $properties, 'total' => $total));
  }
  else {
    $datastream_properties = new DatastreamProperties($pid);
    $success = $datastream_properties->setProperties(/* Determine the fields we want to pass here */);
    $message = $success ? t('Successfuly modified datastream properties') : t('Failed to modify datastream properties');
    $properties = $datastream_properties->getProperties();
    return json_encode(array('success' => TRUE, 'msg' => $message, 'data' => $properties));
  }
}