<?php

// $Id$

/**
 * @file
 * 
 * Implements hooks and callbacks for this module.
 */
/**
 * Constants
 */
define("PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS", 'View Objects & Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES", 'Modify Object Properties');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS", 'Purge Objects');
define("PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS", 'Add Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS", 'Purge Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS", 'Download Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES", 'Modify Datastream Properties');

/**
 * Implements Menu Hook. Registers Menus.
 */
function content_model_viewer_menu() {
  $items['viewer/%'] = array(
    'title' => 'Content Model Viewer',
    'description' => 'Allows users to view Fedora Objects.',
    'page callback' => 'content_model_viewer',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['viewer/%/properties'] = array(
    'page callback' => 'content_model_viewer_properties',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams'] = array(
    'page callback' => 'content_model_viewer_datastreams',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_object',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/add'] = array(
    'page callback' => 'content_model_viewer_add_datastream',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/download'] = array(
    'page callback' => 'content_model_viewer_download_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/view'] = array(
    'page callback' => 'content_model_viewer_view_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/properties'] = array(
    'page callback' => 'content_model_viewer_properties',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_perm. Register permissions.
 * 
 * @return array
 */
function content_model_viewer_perm() {
  return array(
    PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES
  );
}

/**
 * Implements Hook Theme. Registers themes.
 *
 * @return array
 */
function content_model_viewer_theme() {
  return array(
    'content_model_viewer' => array(
      'arguments' => array(),
      'template' => 'Viewer',
    ),
  );
}

/**
 * Renders the Viewer for a given pid if possible.
 * 
 * @param string $pid 
 */
function content_model_viewer($pid) {
  return theme('content_model_viewer');
}

/**
 * Gets/sets the properties of the object identified by $pid.
 * 
 * @param string $pid 
 * 
 * @return string
 */
function content_model_viewer_properties($pid) {
  module_load_include('inc', 'content_model_viewer', 'ObjectProperties');
  if (empty($_POST)) {
    $object_properties = new ObjectProperties($pid);
    $properties = $object_properties->getProperties();
    return json_encode(array('success' => TRUE, 'data' => $properties));
  }
  else {
    $object_properties = new ObjectProperties($pid);
    $success = $object_properties->setProperties();
    $message = $success ? 'Successfuly modified object properties' : 'Failed to modify object properties';
    $properties = $object_properties->getProperties();
    return json_encode(array('success' => TRUE, 'msg' => $message, 'data' => $properties));
  }
}

/**
 * Purges the object identified by $pid.
 * 
 * The user will be redirected to the sites home page.
 * 
 * @param string $pid 
 * 
 * @return string
 */
function content_model_viewer_purge_object($pid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge();
  $message = $success ? 'Successfuly deleted object' : 'Failed to delete object';
  return json_encode(array('success' => $success, 'msg' => $message));
}

/**
 * Adds a datastream to the object identified by $pid.
 * 
 * @param string $pid 
 * 
 * @return string
 */
function content_model_viewer_add_datastream($pid) {
  $values = $_POST;
  $dsid = $_POST['dsid'];
  $label = $_POST['label'];
  $control = $_POST['control_group'];
  $mime = $_POST['mime_type'];
  $file = array_shift($_FILES);
  if ($file['type'] != $mime) {
    $message = 'Mime type of file does not match the mime type specified.';
    return json_encode(array('success' => FALSE, 'msg' => $message));
  }
  else {
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');
    $item = new Fedora_Item($pid);
    $success = $item->add_datastream_from_file($file['tmp_name'], $dsid, $label, $mime, $control);
    $message = $success ? 'Successfully added datastream.' : 'Failed to add datastream.';
    return json_encode(array('success' => $success, 'msg' => $message));
  }
}

/**
 * Purges the given datastream ($dsid) from the object identified by $pid.
 * 
 * @param string $pid 
 * @param string $dsid
 * 
 * @return string
 */
function content_model_viewer_purge_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge_datastream($dsid);
  $message = $success ? 'Successfully purged datastream.' : 'Failed to purge datastream.';
  return json_encode(array('success' => $success, 'msg' => $message));
}

/**
 * Downloads the given datastream ($dsid) from the object identified by $pid.
 * 
 * @param string $pid 
 * @param string $dsid
 * 
 * @return string
 */
function content_model_viewer_download_datastream($pid, $dsid) {
  // @todo I think in the old version this went directly though islandora. 
  // We'll change that so we have some extra control here.
}

/**
 * Renders the viewer for the given datastream ($dsid) from the object identified by $pid.
 * 
 * @param string $pid 
 * @param string $dsid
 * 
 * @return string
 */
function content_model_viewer_view_datastream($pid, $dsid) {
  // @todo implement
}

/**
 * Gets/set the properties of the given datastream ($dsid) from the object identified by $pid.
 * 
 * @param string $pid 
 * @param string $dsid
 * 
 * @return string
 */
function content_model_viewer_datastream_properties($pid, $dsid) {
  // @todo implement
}