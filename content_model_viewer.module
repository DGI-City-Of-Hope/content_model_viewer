<?php

// $Id$

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */
/**
 * Constants
 */
define("PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS", 'View Objects & Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES", 'Modify Object Properties');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS", 'Purge Objects');
define("PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS", 'Add Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS", 'Purge Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS", 'Download Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES", 'Modify Datastream Properties');

/**
 * Implements Menu Hook. Registers Menus.
 */
function content_model_viewer_menu() {
  $items['viewer/%'] = array(
    'title' => t('Content Model Viewer'),
    'description' => t('Allows users to view Fedora Objects.'),
    'page callback' => 'content_model_viewer',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['viewer/%/members'] = array(
    'page callback' => 'content_model_viewer_members',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/properties'] = array(
    'page callback' => 'content_model_viewer_properties',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams'] = array(
    'page callback' => 'content_model_viewer_datastreams',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/overview'] = array(
    'page callback' => 'content_model_viewer_overview',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_object',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/add'] = array(
    'page callback' => 'content_model_viewer_add_datastream',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/download'] = array(
    'page callback' => 'content_model_viewer_download_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/view'] = array(
    'page callback' => 'content_model_viewer_view_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/properties'] = array(
    'page callback' => '',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_perm. Register permissions.
 *
 * @return array
 */
function content_model_viewer_perm() {
  return array(
    PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES
  );
}

/**
 * Implements Hook Theme. Registers themes.
 *
 * @return array
 */
function content_model_viewer_theme() {
  return array(
    'content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'Viewer',
    ),
  );
}

/**
 * Loads all the installed module classes.
 */
function content_model_viewer_include_content_models() {
  $include_path = drupal_get_path('module', 'content_model_viewer') . "/models";
  $dir = opendir($include_path);
  if ($dir !== false) {
    while (($file = readdir($dir)) !== false) {
      if (preg_match('/\.inc$/', $file)) {
        require_once "$include_path/$file";
      }
    }
  }
  closedir($dir);
}

/**
 * Get the list of installed ContentModelViewer classes.
 */
function content_model_viewer_get_models() {
  $models = array();
  $classes = get_declared_classes();
  foreach ($classes as $class) {
    if ($class instanceof ContentModelViewer) {
      $models[] = $class;
    }
  }
  return $models;
}

/**
 * Loads all the installed viewer classes.
 */
function content_model_viewer_include_viewers() {
  $include_path = drupal_get_path('module', 'content_model_viewer') . "/viewers";
  $dir = opendir($include_path);
  if ($dir !== false) {
    while (($file = readdir($dir)) !== false) {
      if (preg_match('/\.inc$/', $file)) {
        require_once "$include_path/$file";
      }
    }
  }
  closedir($dir);
}

/**
 * Gets the Supported Viewers.
 * 
 * @staticvar array $cache
 * @return array
 */
function content_model_viewer_get_supported_viewers() {
  static $cache;
  if (!isset($cache)) {
    $cache = array();
    foreach (module_implements('elements') as $module) {
      $elements = module_invoke($module, 'elements');
      if (isset($elements) && is_array($elements)) {
        $cache = array_merge_recursive($cache, $elements);
      }
    }
  }
  return $cache;
}

/**
 * Sets up variables for the template.
 * 
 * @param array $variables
 */
function template_preprocess_content_model_viewer(array &$variables) {
  global $base_url;
  $pid = $variables['pid'];
  $variables['base_url'] = $base_url;
  $variables['dsid'] = 'SWF';
  $variables['view_function'] = 'loadFlexPlayer';
  $variables['paths'] = array(
    'object' => array(
      'overview' => "viewer/$pid/overview",
      'properties' => "viewer/$pid/properties",
      'datastreams' => "viewer/$pid/datastreams",
      'members' => "viewer/$pid/members",
      'purge' => "viewer/$pid/purge"
    ),
    'datastream' => array(
      'add' => "viewer/$pid/add",
      'purge' => "viewer/$pid/dsid/purge",
      'properties' => "viewer/$pid/dsid/properties",
      'download' => "viewer/$pid/dsid/download",
      'view' => "viewer/$pid/dsid/view"
    )
  );
}

/**
 * Renders the Viewer for a given pid if possible.
 *
 * @param string $pid
 */
function content_model_viewer($pid) {
  global $base_url;
  $path = drupal_get_path('module', 'content_model_viewer');
  /* Load ExtJS */
  $ext_path = $path . '/lib/ext';
  drupal_add_js($ext_path . '/ext-all-dev.js');
  drupal_add_css($path . '/css/Clear.css');
  drupal_add_css($ext_path . '/resources/css/ext-all-gray.css', 'theme', 'all');
  /* Load Panels/Widgets */
  $js_path = $path . '/js';
  drupal_add_js($js_path . '/IncludeFirst.js');
  drupal_add_js($js_path . '/OverviewPanel.js');
  drupal_add_js($js_path . '/CollectionPanel.js');
  drupal_add_js($js_path . '/ViewerPanel.js');
  drupal_add_js($js_path . '/ManagePanel.js');
  drupal_add_js($js_path . '/ContentModelViewer.js');
  drupal_add_css($path . '/css/ContentModelViewer.css');
  /* Load Viewers */
  module_load_include('inc', 'content_model_viewer', 'viewers/AbstractViewer');
  AbstractViewer::LoadRequiredResourcesForAllViewers();
  return theme('content_model_viewer', $pid);
}

/**
 * Returns the HTML for overview panel in the viewer.
 * 
 * @param string $pid 
 * 
 * @return string
 */
function content_model_viewer_overview($pid) {
  content_model_viewer_include_content_models(); // Include Content Models.
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'ContentModel');
  //$content_model = ContentModel::loadFromObject($pid);
  //module_invoke_all('');
  echo '<div>Over View Panel</div>';
  exit();
}

/**
 * Gets the members of this collection.
 * 
 * @param string $pid 
 */
function content_model_viewer_members($pid) {
  global $base_url;
  $module_path = drupal_get_path('module', 'content_model_viewer');
  $data = array(
    array(
      'link' => $base_url . '/viewer/' . 'coccc:1675',
      'label' => 'Some Colorado College Object',
      'description' => 'The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the \"yearbox.\"',
      'owner' => 'fedoraAdmin',
      'created' => '2011-06-17T15:15:57.214Z',
      'modified' => '2011-07-15T19:08:16.008Z',
      'tn' => '/' . $module_path. '/images/collection.png',
    ),
    array(
      'link' => $base_url . '/viewer/' . 'coccc:1675',
      'label' => 'Some Colorado College Object',
      'description' => 'The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the \"yearbox.\"',
      'owner' => 'fedoraAdmin',
      'created' => '2011-06-17T15:15:57.214Z',
      'modified' => '2011-07-15T19:08:16.008Z',
      'tn' => '/' . $module_path. '/images/collection.png',
    ),
    array(
      'link' => $base_url . '/viewer/' . 'coccc:1675',
      'label' => 'Some Colorado College Object',
      'description' => 'The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the \"yearbox.\"',
      'owner' => 'fedoraAdmin',
      'created' => '2011-06-17T15:15:57.214Z',
      'modified' => '2011-07-15T19:08:16.008Z',
      'tn' => '/' . $module_path. '/images/collection.png',
    )
  );
  $total = 3;
  echo json_encode(array('success' => TRUE, 'data' => $data, 'total' => $total));
  exit();
}

/**
 * 
 * 
 * @param string $pid 
 */
function content_model_viewer_datastreams($pid) {
  // @todo check to see if the object exists.
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $data = array();
  $count = 0;
  $start = $_GET['start'];
  $limit = $_GET['limit'];
  $end = (isset($limit)) ? $start + $limit : NULL;
  foreach ($item->datastreams as $dsid => $attr) {
    if ($count >= $start && (empty($end) || $count < $end)) {
      $stream['dsid'] = $dsid;
      $stream['label'] = $attr['label'];
      $stream['state'] = 'A';
      $stream['mime'] = $attr['MIMEType'];
      $stream['created'] = '';
      $stream['view'] = true; // From Files Panel
      $stream['view_function'] = 'loadFlexPlayer';
      $stream['download'] = true; // From Files Panel
      $stream['tn'] = 'some url';
      $data[] = $stream;
    }
    $count++;
  }
  $total = count($item->datastreams);
  echo json_encode(array('success' => TRUE, 'data' => $data, 'total' => $total));
  exit();
}

/**
 * Get/Set a datastreams properties.
 * 
 * @param string $pid
 * @param string $dsid 
 */
function content_model_viewer_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  if (isset($item->datastreams[$dsid])) {
    $datastream = $item->datastreams[$dsid];
    switch ($_SERVER['REQUEST_METHOD']) {
      case 'PUT':
        if ($_SERVER['CONTENT_LENGTH'] > 0) {
          $stdin = fopen("php://input", "r");
          $json = fread($stdin, $_SERVER['CONTENT_LENGTH']);
          $data = json_decode($json);
          // @todo Update the datastreams properties ...
          $data->created = "NOW";
          echo json_encode(array('success' => TRUE, 'msg' => "Successfully modified $dsid's properties", 'data' => $data));
          exit();
        }
        break;
    }
  }
  echo json_encode(array('success' => FALSE, 'msg' => "Datastream $dsid does not exist."));
  exit();
}

/**
 * Gets/sets the properties of the object identified by $pid.
 *
 * @param string $pid
 * 
 * @return string
 */
function content_model_viewer_properties($pid) {
  module_load_include('inc', 'content_model_viewer', 'ObjectProperties');
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
      $object_properties = new ObjectProperties($pid);
      $properties = $object_properties->getProperties();
      echo json_encode(array('success' => TRUE, 'data' => array($properties)));
      exit();
    case 'POST':
      $label = $_POST['label'];
      $owner = $_POST['owner'];
      $state = $_POST['state'];
      $object_properties = new ObjectProperties($pid);
      $success = $object_properties->setProperties($label, $owner, $state);
      $message = $success ? t('Successfuly modified object properties') : t('Failed to modify object properties');
      $properties = $object_properties->getProperties();
      echo json_encode(array('success' => TRUE, 'msg' => $message, 'data' => $properties));
      exit();
  }
}

/**
 * Purges the object identified by $pid.
 *
 * The user will be redirected to the sites home page.
 *
 * @param string $pid 
 *
 * @return string
 */
function content_model_viewer_purge_object($pid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge();
  $message = $success ? t('Successfuly deleted object') : t('Failed to delete object');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Adds a datastream to the object identified by $pid.*
 *
 * @param string $pid 
 *
 * @return string
 */
function content_model_viewer_add_datastream($pid) {
  $values = $_POST;
  $dsid = $_POST['dsid'];
  $label = $_POST['label'];
  $control = $_POST['control']; // Manage
  $file = array_shift($_FILES);
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $success = false;
  if ($file['error'] == UPLOAD_ERR_OK) {
    try {
      $item = new Fedora_Item($pid);
      if (empty($item->datastreams[$dsid])) {
        $success = $item->add_datastream_from_file($file['tmp_name'], $dsid, $label, NULL, $control);
      }
    } catch (Exception $e) {
      // log some error...
    }
  }
  $message = $success ? t('Successfully added datastream.') : t('Failed to add datastream.');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Purges the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_purge_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge_datastream($dsid);
  $message = $success ? t('Successfully purged datastream.') : t('Failed to purge datastream.');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Downloads the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_download_datastream($pid, $dsid) {
  module_load_include('inc', 'content_model_viewer', 'Download');
  download_datastream($pid, $dsid);
}

/**
 * Renders the viewer for the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_view_datastream($pid, $dsid) {
  content_model_viewer_include_viewers();
  // @todo get the viewer for the datastream
  $viewer_exists = false;
  if (!$viewer_exists) {
    $viewer = new FlexPaperViewer();
    echo $viewer->render($pid, $dsid);
    exit();
  }
  exit();
}

/**
 * Gets/set the properties of the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_datastream_properties($pid, $dsid) {
  module_load_include('inc', 'content_model_viewer', 'DatastreamProperties');
  if (empty($_POST)) {
    // @todo detect if the datastream doesn't exist and respond accordingly
    $datastream_properties = new DatastreamProperties($pid);
    list($properties, $total) = $datastream_properties->getProperties();
    return json_encode(array('success' => TRUE, 'data' => $properties, 'total' => $total));
  }
  else {
    $datastream_properties = new DatastreamProperties($pid);
    $success = $datastream_properties->setProperties(/* Determine the fields we want to pass here */);
    $message = $success ? t('Successfuly modified datastream properties') : t('Failed to modify datastream properties');
    $properties = $datastream_properties->getProperties();
    return json_encode(array('success' => TRUE, 'msg' => $message, 'data' => $properties));
  }
}